/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package com.cabolabs.openehr.rest.client

import spock.lang.Specification
import spock.lang.Unroll

import com.cabolabs.openehr.rm_1_0_2.support.identification.*
import com.cabolabs.openehr.rm_1_0_2.ehr.EhrStatus
import com.cabolabs.openehr.rm_1_0_2.data_types.text.*
import com.cabolabs.openehr.rm_1_0_2.data_structures.item_structure.ItemTree
import com.cabolabs.openehr.rm_1_0_2.data_structures.item_structure.representation.Element
import com.cabolabs.openehr.rm_1_0_2.common.archetyped.*
import com.cabolabs.openehr.rm_1_0_2.common.generic.PartySelf

import com.cabolabs.openehr.formats.OpenEhrJsonParserQuick


class OpenEhrRestClientTest extends Specification {

   static def client

   static boolean auth = false

   def setup()
   {
      // read values from config file
      def properties = new Properties()

      this.getClass().getResource(File.separator + 'application.properties').withInputStream {
         properties.load(it)
      }

      // run auth once
      if (!auth)
      {
         client = new OpenEhrRestClient(
            properties.sut_api_url,
            properties.sut_api_auth_url,
            properties.sut_api_admin_url
         )

         // set required header for POST endpoints
         client.setCommitterHeader('name="John Doe", external_ref.id="BC8132EA-8F4A-11E7-BB31-BE2E44B06B34", external_ref.namespace="demographic", external_ref.type="PERSON"')

         client.auth("admin@cabolabs.com", "admin") // TODO: set on config file

         auth = true // TODO: actually check the auth result is OK
      }
   }


   /**
    * Test EHR creation with all possible combinations of valid EHR_STATUS.
    * This test case doesn't focus on data validation against OPT constraints.
    */
   @Unroll
   def "B.1.a. create new ehr"()
   {
      when:
         def ehr = create_ehr(data_set_no, is_queryable, is_modifiable, has_status, subject_id, other_details, ehr_id)

      then:
         if (!ehr) println client.lastError

         ehr != null
         ehr.ehr_status != null

         // ehr_status is an object_ref
         ehr.ehr_status.uid != null

         if (subject_id)
         {
            ehr.ehr_status.subject.external_ref.id.value == subject_id
         }

      cleanup:
         // server cleanup
         client.truncateServer()


      // NOTE: all subjec_ids should be different to avoid the "patient already have an EHR error", which is expected when you create two EHRs for the same patietn
      where:
         [data_set_no, is_queryable, is_modifiable, has_status, subject_id, other_details, ehr_id] << valid_cases()
   }


   @Unroll
   def "B.1.b. create ehr twice"()
   {
      // NOTE: if the data set defines a subject_id, it shouldn't be used to avoid making this case fail because of
      //       the patient already having an EHR, that is tested in the next case B.1.c
      when:
         def ehr1 = create_ehr(data_set_no, is_queryable, is_modifiable, has_status, null, other_details, ehr_id)

      then:
         ehr1 != null
         ehr1.ehr_status != null

         // ehr_status is an object_ref
         ehr1.ehr_status.uid != null

      when:
         def ehr2 = create_ehr(data_set_no, is_queryable, is_modifiable, has_status, null, other_details, ehr1.ehr_id.value)

      then:
         ehr2 == null
         client.lastError.result.code == 'EHRSERVER::API::RESPONSE_CODES::99213'
         client.lastError.result.message == "EHR with ehr_id ${ehr1.ehr_id.value} already exists, ehr_id must be unique"


      cleanup:
         // server cleanup
         client.truncateServer()


      // NOTE: all subjec_ids should be different to avoid the "patient already have an EHR error", which is expected when you create two EHRs for the same patietn
      where:
         [data_set_no, is_queryable, is_modifiable, has_status, subject_id, other_details, ehr_id] << valid_cases()
   }


   private def create_ehr(data_set_no, is_queryable, is_modifiable, has_status, subject_id, other_details, ehr_id)
   {
      def ehr

      if (has_status)
      {
         def status = new EhrStatus()
         status.name = new DvText(value:"Generic Status")
         status.archetype_node_id = "openEHR-EHR-EHR_STATUS.generic.v1"
         status.is_modifiable = is_modifiable
         status.is_queryable = is_queryable
         status.archetype_details = new Archetyped(
            rm_version: '1.0.2',
            archetype_id: new ArchetypeId(
               value: "openEHR-EHR-EHR_STATUS.generic.v1"
            ),
            template_id: new TemplateId(
               value: "ehr_status_any_en_v1"
            )
         )

         // subject is mandatory in the RM, subject.external_ref is optional
         status.subject = new PartySelf()

         if (subject_id)
         {
            status.subject.external_ref = new PartyRef(
               namespace: "DEMOGRAPHIC",
               type: "PERSON",
               id: new GenericId(
                  value: subject_id,
                  scheme: "CABOLABS_MPI"
               )
            )
         }

         if (other_details)
         {
            status.other_details = new ItemTree(
               name: new DvText(
                  value: "tree"
               ),
               archetype_node_id: 'at0001',
               items: [
                  new Element(
                     name: new DvText(
                        value: "coded"
                     ),
                     archetype_node_id: 'at0002',
                     value: new DvCodedText(
                        value: 'some value',
                        defining_code: new CodePhrase(
                           code_string: '55501',
                           terminology_id: new TerminologyId(
                              value: 'coolterm'
                           )
                        )
                     )
                  )
               ]
            )
         }

         if (ehr_id)
         {
            ehr = client.createEhr(status, ehr_id) // TODO: not supported by the API yet
         }
         else
         {
            ehr = client.createEhr(status)
         }
      }
      else // without payload
      {
         if (ehr_id)
         {
            ehr = client.createEhr(ehr_id)
         }
         else
         {
            ehr = client.createEhr()
         }
      }

      return ehr
   }

   static List valid_cases()
   {
      // data_set_no | is_queryable | is_modifiable | has_status | subject_id | other_details | ehr_id
      return [
         [ null,       true,          true,           false,       null,        null,           null    ],
         [ null,       true,          true,           false,       null,        null,           '7029bd9b-0295-4313-9dd2-da070223aed0'    ],
         [ 1,          true,          true,           true,        '11111',     null,           null    ],
         [ 2,          true,          false,          true,        '22222',     null,           null    ],
         [ 3,          false,         true,           true,        '33333',     null,           null    ],
         [ 4,          false,         false,          true,        '44444',     null,           null    ],
         [ 5,          true,          true,           true,        '55555',     true,           null    ],
         [ 6,          true,          false,          true,        '66666',     true,           null    ],
         [ 7,          false,         true,           true,        '77777',     true,           null    ],
         [ 8,          false,         false,          true,        '88888',     true,           null    ],
         [ 9,          true,          true,           true,        '99999',     null,           '11109' ],
         [ 10,         true,          false,          true,        '101010',    null,           '22210' ],
         [ 11,         false,         true,           true,        '111111',    null,           '33311' ],
         [ 12,         false,         false,          true,        '121212',    null,           '44412' ],
         [ 13,         true,          true,           true,        '131313',    true,           '55513' ],
         [ 14,         true,          false,          true,        '141414',    true,           '66614' ],
         [ 15,         false,         true,           true,        '151515',    true,           '77715' ],
         [ 16,         false,         false,          true,        '161616',    true,           '88816' ],
         [ 17,         true,          true,           true,        null,        null,           null    ],
         [ 18,         true,          false,          true,        null,        null,           null    ],
         [ 19,         false,         true,           true,        null,        null,           null    ],
         [ 20,         false,         false,          true,        null,        null,           null    ],
         [ 21,         true,          true,           true,        null,        true,           null    ],
         [ 22,         true,          false,          true,        null,        true,           null    ],
         [ 23,         false,         true,           true,        null,        true,           null    ],
         [ 24,         false,         false,          true,        null,        true,           null    ],
         [ 25,         true,          true,           true,        null,        null,           '111111'],
         [ 26,         true,          false,          true,        null,        null,           '222222'],
         [ 27,         false,         true,           true,        null,        null,           '333333'],
         [ 28,         false,         false,          true,        null,        null,           '444444'],
         [ 29,         true,          true,           true,        null,        true,           '555555'],
         [ 30,         true,          false,          true,        null,        true,           '666666'],
         [ 31,         false,         true,           true,        null,        true,           '777777'],
         [ 32,         false,         false,          true,        null,        true,           '888888']
      ]
   }





   def "create composition"()
   {
      when:
         String opt        = this.getClass().getResource(File.separator + 'minimal_evaluation.opt').text
         String json_compo = this.getClass().getResource(File.separator + 'minimal_evaluation.en.v1_20230205.json').text

         //println json_compo

         client.uploadTemplate(opt)

         // if (client.lastError)
         // {
         //    println client.lastError
         // }

         def parser = new OpenEhrJsonParserQuick()
         def compo = parser.parseJson(json_compo)
         def ehr = client.createEhr()

         def results = (1..100).collect {
            client.createComposition(ehr.ehr_id.value, compo)
         }

         /*
         def compo_out = client.createComposition(ehr.ehr_id.value, compo)

         println compo_out

         if (!compo_out)
         {
            println client.lastError
         }
         */

         //client.lastError.result.code == 'EHRSERVER::API::RESPONSE_CODES::99213'
         //client.lastError.result.message

         //println results


      then:
         results.each {
            it != null
         }


      cleanup:
         // server cleanup
         client.truncateServer()

   }
}
