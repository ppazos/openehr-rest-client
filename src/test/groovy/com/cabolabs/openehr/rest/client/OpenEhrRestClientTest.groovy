/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package com.cabolabs.openehr.rest.client

import spock.lang.Specification

import com.cabolabs.openehr.rm_1_0_2.support.identification.*
import com.cabolabs.openehr.rm_1_0_2.ehr.EhrStatus
import com.cabolabs.openehr.rm_1_0_2.data_types.text.*
import com.cabolabs.openehr.rm_1_0_2.data_structures.item_structure.ItemTree
import com.cabolabs.openehr.rm_1_0_2.data_structures.item_structure.representation.Element
import com.cabolabs.openehr.rm_1_0_2.common.archetyped.*
import com.cabolabs.openehr.rm_1_0_2.common.generic.PartySelf

class OpenEhrRestClientTest extends Specification {

   static def client

   static boolean auth = false

   def setup()
   {
      // read values from config file
      def properties = new Properties()

      this.getClass().getResource(File.separator + 'application.properties').withInputStream {
         properties.load(it)
      }

      // run auth once
      if (!auth)
      {
         client = new OpenEhrRestClient(properties.sut_api_url, properties.sut_api_auth_url)
         client.auth("admin@cabolabs.com", "admin") // TODO: set on config file

         auth = true
      }
   }


   def "B.1.a. create ehr no payload"()
   {
      when:
         def ehr = client.createEhr()

      then:
         ehr != null
         ehr.ehr_status != null

         // TODO: call cleanup
   }


   /**
    * Test EHR creation with all possible combinations of valid EHR_STATUS.
    * This test case doesn't focus on data validation against OPT constraints.
    */
   def "B.1.a. create ehr with payload"()
   {
      when:
         def status = new EhrStatus()
         status.name = new DvText(value:"Generic Status")
         status.archetype_node_id = "openEHR-EHR-EHR_STATUS.generic.v1"
         status.is_modifiable = is_modifiable
         status.is_queryable = is_queryable
         status.archetype_details = new Archetyped(
            rm_version: '1.0.2',
            archetype_id: new ArchetypeId(
               value: "openEHR-EHR-EHR_STATUS.generic.v1"
            ),
            template_id: new TemplateId(
               value: "ehr_status_any_en_v1"
            )
         )

         // subject is mandatory in the RM, subject.external_ref is optional
         status.subject = new PartySelf()

         if (subject_id)
         {
            status.subject.external_ref = new PartyRef(
               namespace: "DEMOGRAPHIC",
               type: "PERSON",
               id: new GenericId(
                  value: subject_id,
                  scheme: "CABOLABS_MPI"
               )
            )
         }

         if (other_details)
         {
            status.other_details = new ItemTree(
               name: new DvText(
                  value: "tree"
               ),
               archetype_node_id: 'at0001',
               items: [
                  new Element(
                     name: new DvText(
                        value: "coded"
                     ),
                     archetype_node_id: 'at0002',
                     value: new DvCodedText(
                        value: 'some value',
                        defining_code: new CodePhrase(
                           code_string: '55501',
                           terminology_id: new TerminologyId(
                              value: 'coolterm'
                           )
                        )
                     )
                  )
               ]
            )
         }

         def ehr

         if (ehr_id)
         {
            ehr = client.createEhr(status, ehr_id) // TODO: not supported by the API yet
         }
         else
         {
            ehr = client.createEhr(status)
         }

         // TODO: add ehr_status.other_details

      then:
         if (!ehr) println client.lastError

         if (expected_error_code)
         {
            def error = client.lastError
            error.code == expected_error_code
         }
         else
         {
            ehr != null
            ehr.ehr_status != null

            // ehr_status is an object_ref
            ehr.ehr_status.uid != null

            if (subject_id)
            {
               ehr.ehr_status.subject.external_ref.id.value == subject_id
            }
         }

         // TODO: call cleanup


      // FIXME: cases with given ehr_id are not yet tested because are not yet supported by the API
      // NOTE: all subjec_ids should be different to avoid the "patient already have an EHR error", which is expected when you create two EHRs for the same patietn
      where:
         data_set_no | is_queryable | is_modifiable | subject_id | other_details | ehr_id  | expected_error_code                    | error_description
         1           | true         | true          | '11111'    | null          | null    | null                                   | null
         2           | true         | false         | '22222'    | null          | null    | null                                   | null
         3           | false        | true          | '33333'    | null          | null    | null                                   | null
         4           | false        | false         | '44444'    | null          | null    | null                                   | null
         5           | true         | true          | '55555'    | true          | null    | null                                   | null
         6           | true         | false         | '66666'    | true          | null    | null                                   | null
         7           | false        | true          | '77777'    | true          | null    | null                                   | null
         8           | false        | false         | '88888'    | true          | null    | null                                   | null

         //9           | true         | true          | '99999'    | null          | '11111' | null                                   | null
         //10          | true         | false         | '101010'    | null          | '22222' | null                                   | null
         //11          | false        | true          | '111111'    | null          | '33333' | null                                   | null
         //12          | false        | false         | '121212'    | null          | '44444' | null                                   | null
         // 13          | true         | true          | '131313'    | true          | '55555' | null                                   | null
         // 14          | true         | false         | '141414'    | true          | '66666' | null                                   | null
         // 15          | false        | true          | '151515'    | true          | '77777' | null                                   | null
         // 16          | false        | false         | '161616'    | true          | '88888' | null

         17          | true         | true          | null       | null          | null    | null | null
         18          | true         | false         | null       | null          | null    | null | null
         19          | false        | true          | null       | null          | null    | null | null
         20          | false        | false         | null       | null          | null    | null | null

         21          | true         | true          | null       | true          | null    | null                                   | null
         22          | true         | false         | null       | true          | null    | null                                   | null
         23          | false        | true          | null       | true          | null    | null                                   | null
         24          | false        | false         | null       | true          | null    | null                                   | null

         //25          | true         | true          | null       | null          | '55555' | 'EHRSERVER::API::RESPONSE_CODES::5001' | 'missing required subject'
         //26          | true         | false         | null       | null          | '66666' | 'EHRSERVER::API::RESPONSE_CODES::5001' | 'missing required subject'
         //27          | false        | true          | null       | null          | '77777' | 'EHRSERVER::API::RESPONSE_CODES::5001' | 'missing required subject'
         //28          | false        | false         | null       | null          | '88888' | 'EHRSERVER::API::RESPONSE_CODES::5001' | 'missing required subject'
         //29          | true         | true          | null       | true          | '55555' | 'EHRSERVER::API::RESPONSE_CODES::5001' | 'missing required subject'
         //30          | true         | false         | null       | true          | '66666' | 'EHRSERVER::API::RESPONSE_CODES::5001' | 'missing required subject'
         //31          | false        | true          | null       | true          | '77777' | 'EHRSERVER::API::RESPONSE_CODES::5001' | 'missing required subject'
         //32          | false        | false         | null       | true          | '88888' | 'EHRSERVER::API::RESPONSE_CODES::5001' | 'missing required subject'
   }
}
